name: Build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - 'main'
env:
  REGISTRY: "registry.digitalocean.com/cicd-project"
  IMAGE_NAME: "reactjs-app"
  # VERSION: 1.0
  CLUSTER_NAME: "k8s-dotnet-cluster"
  DEPLOYMENT_NAME: "react-project"

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04

    steps:
      - name: Import Secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: ${{ secrets.VAULT_URL }}
          tlsSkipVerify: true
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/data/sonar SONAR_TOKEN ;
            secret/data/sonar SONAR_HOST_URL ;
            secret/data/sonar DIGITALOCEAN_ACCESS_TOKEN

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      
      - name: Install NPM packages
        run: npm ci
      
      - name: Build project
        run: npm run build --if-present

      - name: Run tests
        run: npm test
  
      # Share artifact inside workflow
      - name: Share artifact inside workflow
        uses: actions/upload-artifact@v1
        with:
          name: react-github-actions-build
          path: build

      - name: SonarQube Code Analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
      
      # Fail the workflow if Qualit Gate status fails
      - name: Sonar Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        
      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ env.DIGITALOCEAN_ACCESS_TOKEN }}
    
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      
      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
      
      # - name: Update deployment file
      #   run: REGISTRY=$(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|'${REGISTRY}'|' $GITHUB_WORKSPACE/config/deployment.yml

      # - name: Save DigitalOcean kubeconfig with short-lived credentials
      #   run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 $CLUSTER_NAME

      # - name: Deploy to DigitalOcean Kubernetes
      #   run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml

      # - name: Verify deployment
      #   run: kubectl rollout status deployment/$DEPLOYMENT_NAME
      
